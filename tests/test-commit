#!/bin/bash
#
# carton_commit.sh tests
#
# Copyright (c) 2013 Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing
# to use, modify, copy, or redistribute it subject to the terms
# and conditions of the GNU General Public License version 2.
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

eval "`ep_env && carton-env || echo exit 1`"
. test_git.sh
. ep.sh
ep_suite_init "$@"

declare -r DATA_DIR=`mktemp --tmpdir -d carton-test.XXXXXXXX`
ep_teardown_push rm -Rf "$DATA_DIR"
declare -r WORK_DIR="$DATA_DIR/work"
declare GIT_DIR="$WORK_DIR/.git"
declare -r COMMIT_DIR="$DATA_DIR/commit"

# Run tests for a commit revision management
# Args: commit_str
function test_rev()
{
    declare -r commit_str="$1"; shift
    declare -A commit
    carton_arr_parse commit <<<"$commit_str"

    ep_suite_begin rev; (
        ep_suite_init

        ep_suite_begin add; (
            ep_suite_init

            ep_suite_begin exec; (
                ep_suite_init
                ep_teardown_push rm -Rf "${commit[rev_dir]}/1"
                ep_test do carton_commit_add_rev "$commit_str" 1 >/dev/null
            ); ep_suite_end

            ep_suite_begin verify; (
                ep_suite_init
                ep_teardown_push rm -Rf "${commit[rev_dir]}/1"
                carton_commit_add_rev "$commit_str" 1 >/dev/null
                ep_test exists test -d "${commit[rev_dir]}/1"
            ); ep_suite_end
        ); ep_suite_end

        ep_suite_begin del; (
            ep_suite_init

            ep_suite_begin exec; (
                ep_suite_init
                ep_teardown_push rm -Rf "${commit[rev_dir]}/1"
                carton_commit_add_rev "$commit_str" 1 >/dev/null
                ep_test do carton_commit_del_rev "$commit_str" 1
            ); ep_suite_end

            ep_suite_begin verify; (
                ep_suite_init
                ep_teardown_push rm -Rf "${commit[rev_dir]}/1"
                carton_commit_add_rev "$commit_str" 1 >/dev/null
                carton_commit_del_rev "$commit_str" 1
                ep_test not_exists \
                        eval "! test -d \"\${commit[rev_dir]}/1\""
            ); ep_suite_end
        ); ep_suite_end
    ); ep_suite_end
}

# Run tests for a single commit
# Args: name committish is_built dist_ver
function test_commit()
{
    declare -r name="$1";       shift
    declare -r committish="$1"; shift
    declare -r is_built="$1";   shift
    declare -r dist_ver="$1";   shift

    ep_suite_begin "$name"; (
        ep_suite_init
        ep_suite_begin init; (
            ep_suite_init
            ep_suite_begin exec; (
                ep_suite_init

                mkdir "$COMMIT_DIR"
                ep_teardown_push rm -Rf "$COMMIT_DIR"

                ep_test_begin do; (
                    ep_test_init
                    carton_commit_init "$COMMIT_DIR" < <(
                        GIT_DIR="$GIT_DIR" git archive --format=tar \
                                                       "$committish"
                    ) >/dev/null
                ); ep_test_end
            ); ep_suite_end

            ep_suite_begin verify; (
                ep_suite_init

                mkdir "$COMMIT_DIR"
                ep_teardown_push rm -Rf "$COMMIT_DIR"

                declare commit_str
                commit_str=`
                    carton_commit_init "$COMMIT_DIR" < <(
                        GIT_DIR="$GIT_DIR" git archive --format=tar \
                                                       "$committish"
                    )`
                declare -A commit
                carton_arr_parse commit <<<"$commit_str"
                ep_test is_built [ "${commit[is_built]}" == "$is_built" ]
                if $is_built; then
                    ep_test dist_ver [ "${commit[dist_ver]}" == "$dist_ver" ]
                    test_rev "$commit_str"
                fi
            ); ep_suite_end
        ); ep_suite_end

        ep_suite_begin load; (
            ep_suite_init

            mkdir "$COMMIT_DIR"
            ep_teardown_push rm -Rf "$COMMIT_DIR"
            carton_commit_init "$COMMIT_DIR" < <(
                GIT_DIR="$GIT_DIR" git archive --format=tar "$committish"
            ) >/dev/null

            ep_test_begin exec; (
                ep_test_init
                carton_commit_load "$COMMIT_DIR" >/dev/null
            ); ep_test_end

            ep_suite_begin verify; (
                ep_suite_init
                declare commit_str
                commit_str=`carton_commit_load "$COMMIT_DIR"`
                declare -A commit
                carton_arr_parse commit <<<"$commit_str"
                ep_test is_built [ "${commit[is_built]}" == "$is_built" ]
                if $is_built; then
                    ep_test dist_ver [ "${commit[dist_ver]}" == "$dist_ver" ]
                    test_rev "$commit_str"
                fi
            ); ep_suite_end
        ); ep_suite_end
    ); ep_suite_end
}

# Workaround vim subshell syntax highlighting issue
{

ep_test_begin source; (
    ep_test_init
    . carton_commit.sh
); ep_test_end

. carton_commit.sh

test_git_make "$WORK_DIR"

test_commit pre_v1_bare     add_build^  false   ""
test_commit pre_v1_build    add_build   true    "1"
test_commit pre_v1_spec     add_spec    true    "1"
test_commit v2              v2          true    "2"

} # Workaround vim subshell syntax highlighting issue
